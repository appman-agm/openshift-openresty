lua_package_path '/usr/local/openresty/site/lualib/?.lua;;';
lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;
lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

variables_hash_max_size 2048;
server_names_hash_bucket_size 128;

server {
    listen       8080;
    lua_code_cache on;


    set_by_lua resolver 'return os.getenv("RESOLVER_ADDRESS") .. "valid=30s ipv6=off"';
    resolver_timeout 10s;

    access_by_lua '
      local opts = {
        accept_none_alg = true,
        discovery = os.getenv("KEYCLOAK_ENDPOINT") .. "/auth/realms/" .. os.getenv("KEYCLOAK_REALM").. "/.well-known/openid-configuration",
        client_id = os.getenv("KEYCLOAK_CLIENT_ID"),
        client_secret = os.getenv("KEYCLOAK_CLIENT_SECRET"),
        ssl_verify = "no",
        redirect_uri_scheme = "https",
        logout_path = "/logout",
        redirect_after_logout_uri = os.getenv("KEYCLOAK_ENDPOINT") .. "/auth/realms/" .. os.getenv("KEYCLOAK_REALM").. "/protocol/openid-connect/logout",
        redirect_after_logout_with_id_token_hint = false,
        session_contents = {id_token=true}
      }
      local res, err = require("resty.openidc").authenticate(opts)

      if err then
        ngx.status = 403
        ngx.say(err)
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end
    ';

    location / {
        root   /application;
        index  index.html index.htm;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # Disable .htaccess and other hidden files
    location ~ /\.(?!well-known).* {
        deny all;
        access_log off;
        log_not_found off;
    }
}
